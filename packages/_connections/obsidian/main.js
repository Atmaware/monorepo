/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  ChatGPTConverterSettingTab: () => ChatGPTConverterSettingTab,
  URLInputModal: () => URLInputModal,
  default: () => ChatGPTConverterPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_child_process = require("child_process");
var import_util = require("util");
var path = __toESM(require("path"));
var execAsync = (0, import_util.promisify)(import_child_process.exec);
var DEFAULT_SETTINGS = {
  outputFolder: "chatgpt"
};
var URLInputModal = class extends import_obsidian.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Enter ChatGPT URLs" });
    const instructions = contentEl.createEl("p", {
      cls: "chatgpt-converter-instructions",
      text: 'Enter the URLs of your shared ChatGPT conversations (one per line). You can find these by clicking "Share" on any ChatGPT conversation.'
    });
    const urlInput = contentEl.createEl("textarea", {
      attr: {
        placeholder: "Paste your ChatGPT conversation URLs here...",
        rows: "10",
        style: "width: 100%; font-family: monospace; padding: 8px; margin: 10px 0; border-radius: 4px; border: 1px solid var(--background-modifier-border);"
      }
    });
    const buttonContainer = contentEl.createEl("div", {
      cls: "chatgpt-converter-buttons"
    });
    const submitButton = buttonContainer.createEl("button", {
      text: "Convert",
      cls: "mod-cta"
    });
    const cancelButton = buttonContainer.createEl("button", {
      text: "Cancel",
      cls: "chatgpt-converter-cancel"
    });
    submitButton.addEventListener("click", () => {
      this.urls = urlInput.value;
      this.close();
      this.onSubmit(this.urls);
    });
    cancelButton.addEventListener("click", () => {
      this.close();
    });
    contentEl.createEl("style", {
      text: `
                .chatgpt-converter-instructions {
                    margin-bottom: 15px;
                    color: var(--text-muted);
                }
                .chatgpt-converter-example {
                    margin-bottom: 15px;
                    padding: 8px;
                    background: var(--background-secondary);
                    border-radius: 4px;
                }
                .chatgpt-converter-example code {
                    word-break: break-all;
                }
                .chatgpt-converter-buttons {
                    display: flex;
                    justify-content: flex-end;
                    gap: 10px;
                    margin-top: 15px;
                }
                .chatgpt-converter-cancel {
                    color: var(--text-muted);
                }
            `
    });
    urlInput.focus();
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var ChatGPTConverterSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Output folder").setDesc("Folder where converted conversations will be saved").addText((text) => text.setPlaceholder("chatgpt").setValue(this.plugin.settings.outputFolder).onChange(async (value) => {
      this.plugin.settings.outputFolder = value;
      await this.plugin.saveSettings();
    }));
  }
};
var ChatGPTConverterPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "convert-chatgpt-conversations",
      name: "Convert ChatGPT Conversations",
      callback: () => {
        new URLInputModal(this.app, async (urls) => {
          if (!urls.trim()) {
            new import_obsidian.Notice("Please enter at least one URL");
            return;
          }
          const urlList = urls.split("\n").filter((url) => url.trim());
          await this.convertConversations(urlList);
        }).open();
      }
    });
    this.addSettingTab(new ChatGPTConverterSettingTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async convertConversations(urls) {
    var _a;
    try {
      const adapter = this.app.vault.adapter;
      const vaultPath = ((_a = adapter.getBasePath) == null ? void 0 : _a.call(adapter)) || adapter.basePath;
      const outputPath = path.join(vaultPath, this.settings.outputFolder);
      const pluginRoot = path.join(vaultPath, this.app.vault.configDir, "plugins", "conversation-importer");
      const converterPath = path.join(pluginRoot, "converters", "chatgpt.py");
      const pyvenvPath = path.join(pluginRoot, "converters", "venv", "bin", "activate");
      await this.app.vault.adapter.mkdir(this.settings.outputFolder);
      const urlsArg = urls.join(" ");
      const command = `source "${pyvenvPath}" && python "${converterPath}" ${urlsArg} --output "${outputPath}" --md`;
      new import_obsidian.Notice("Converting conversations...");
      const { stdout, stderr } = await execAsync(command);
      if (stderr) {
        console.error("Conversion error:", stderr);
        new import_obsidian.Notice("Error converting conversations. Check console for details.");
        return;
      }
      new import_obsidian.Notice("Conversations converted successfully!");
    } catch (error) {
      console.error("Error:", error);
      new import_obsidian.Notice("Error converting conversations. Check console for details.");
    }
  }
};
